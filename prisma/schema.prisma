generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sex {
  id        Int        @id @default(autoincrement())
  name      String     @unique(map: "name") @db.VarChar(10)
  createdBy Int?       @default(1)
  deleted   Int?       @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  User      User?      @relation(fields: [createdBy], references: [id])
  Personal  Personal[]
}

model YesNo {
  id           Int            @id @default(autoincrement())
  value        String?        @db.VarChar(255)
  createdBy    Int?           @default(1)
  deleted      Int?           @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Confirmation Confirmation[]
  Bonded       Bonded[]
  User         User?          @relation(fields: [createdBy], references: [id])
}

model MaritalStatus {
  id        Int        @id @default(autoincrement())
  name      String     @unique(map: "name") @db.VarChar(10)
  createdBy Int?       @default(1)
  deleted   Int?       @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Personal  Personal[]
  User      User?      @relation(fields: [createdBy], references: [id])
}

model Division {
  id        Int      @id @default(autoincrement())
  name      String   @unique(map: "name") @db.VarChar(255)
  createdBy Int?     @default(1)
  deleted   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Department Department[]
  User       User?        @relation(fields: [createdBy], references: [id])
}

model Department {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  createdBy  Int?     @default(1)
  deleted    Int?     @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Division   Division @relation(fields: [divisionId], references: [id])
  divisionId Int
  User       User[]
}

model StaffType {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(255)
  createdBy Int?     @default(1)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Policy    Policy[]

  Recruitment Recruitment[]
  User        User?         @relation(fields: [createdBy], references: [id])
}

model EducationLevel {
  id             Int              @id @default(autoincrement())
  name           String           @unique(map: "name") @db.VarChar(100)
  createdBy      Int?             @default(1)
  deleted        Int?             @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Policy         Policy[]
  SchoolAttended SchoolAttended[]
  Certificate    Certificate[]
  User           User?            @relation(fields: [createdBy], references: [id])
}

model Policy {
  id             Int            @id @default(autoincrement())
  name           String?        @db.VarChar(255)
  age            Int
  EducationLevel EducationLevel @relation(fields: [educationLevelId], references: [id])
  StaffType      StaffType      @relation(fields: [staffTypeId], references: [id])
  experience     Int?
  minimumGrade   Int
  deadline       DateTime?      @db.Date
  note           String?        @db.VarChar(1000)
  createdBy      Int?           @default(1)
  deleted        Int?           @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  staffTypeId      Int
  educationLevelId Int
  Job              Job[]
  Advert           Advert[]
  User             User?    @relation(fields: [createdBy], references: [id])
}

model Job {
  id            Int             @id @default(autoincrement())
  Policy        Policy          @relation(fields: [policyId], references: [id])
  name          String?         @unique(map: "name") @db.VarChar(255)
  published     Int?            @default(0)
  createdBy     Int?            @default(1)
  deleted       Int?            @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  policyId      Int
  AccessibleJob AccessibleJob[]
  Application   Application[]
  User          User?           @relation(fields: [createdBy], references: [id])

  @@unique([policyId, name, deleted], name: "name_policy")
}

model Advert {
  id        Int      @id @default(autoincrement())
  Policy    Policy   @relation(fields: [policyId], references: [id])
  name      String?  @db.VarChar(255)
  details   String?  @db.Text
  published Int?     @default(0)
  createdBy Int?     @default(1)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  policyId  Int
  User      User?    @relation(fields: [createdBy], references: [id])
}

model ExamTypeNew {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  createdBy Int?     @default(1)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  IndexNumber IndexNumber[]
  User        User?         @relation(fields: [createdBy], references: [id])
}

model ExamType {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  createdBy Int?     @default(1)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Grade          Grade[]
  Subject        Subject[]
  GradesObtained GradesObtained[]
  User           User?            @relation(fields: [createdBy], references: [id])
}

model Subject {
  id          Int         @id @default(autoincrement())
  ExamType    ExamType    @relation(fields: [examTypeId], references: [id])
  SubjectType SubjectType @relation(fields: [subjectTypeId], references: [id])
  name        String      @db.VarChar(255)
  createdBy   Int?        @default(1)
  deleted     Int?        @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  examTypeId     Int
  subjectTypeId  Int
  GradesObtained GradesObtained[]
  User           User?            @relation(fields: [createdBy], references: [id])
}

model SubjectType {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(255)
  createdBy Int?     @default(1)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Subject Subject[]
  User    User?     @relation(fields: [createdBy], references: [id])
}

model Recruitment {
  id        Int      @id @default(autoincrement())
  name      String?  @unique(map: "name") @db.VarChar(255)
  code      String?  @db.VarChar(255)
  createdBy Int?     @default(1)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  StaffType           StaffType             @relation(fields: [staffTypeId], references: [id])
  staffTypeId         Int
  CurrentRecruitment  CurrentRecruitment[]
  CurrentShortlisting CurrentShortlisting[]
  User                User?                 @relation(fields: [createdBy], references: [id])
}

model CurrentRecruitment {
  id            Int           @id @default(autoincrement())
  createdBy     Int?          @default(1)
  deleted       Int?          @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Recruitment   Recruitment   @relation(fields: [recruitmentId], references: [id])
  Application   Application[]
  recruitmentId Int
  User          User?         @relation(fields: [createdBy], references: [id])
}

model CurrentShortlisting {
  id            Int         @id @default(autoincrement())
  createdBy     Int?        @default(1)
  deleted       Int?        @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Recruitment   Recruitment @relation(fields: [recruitmentId], references: [id])
  recruitmentId Int
  User          User?       @relation(fields: [createdBy], references: [id])
}

model Grade {
  id             Int      @id @default(autoincrement())
  ExamType       ExamType @relation(fields: [examTypeId], references: [id])
  name           String   @db.VarChar(255)
  examTypeId     Int
  interpretation Int
  createdBy      Int?     @default(1)
  deleted        Int?     @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  User           User?    @relation(fields: [createdBy], references: [id])

  GradesObtained GradesObtained[]
}

model UserRole {
  id         Int          @id @default(autoincrement())
  name       String       @unique @db.VarChar(255)
  createdBy  Int?         @default(1)
  deleted    Int?         @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  User       User[]
  PageAccess PageAccess[]
  // CreatedBy  User?        @relation(fields: [createdBy], references: [id])
}

model PageAccess {
  id         Int      @id @default(autoincrement())
  UserRole   UserRole @relation(fields: [userRoleId], references: [id])
  Page       Page     @relation(fields: [pageId], references: [id])
  createdBy  Int?     @default(1)
  deleted    Int?     @default(0)
  userRoleId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pageId     Int
}

model AccessibleJob {
  id        Int      @id @default(autoincrement())
  jobId     Int
  Job       Job      @relation(fields: [jobId], references: [id])
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User? @relation(fields: [userId], references: [id])
  userId Int
}

model User {
  id          Int     @id @default(autoincrement())
  firstName   String? @db.VarChar(255)
  surname     String? @db.VarChar(255)
  otherNames  String? @db.VarChar(255)
  email       String  @unique(map: "email") @db.VarChar(50)
  phoneNumber String? @unique(map: "phoneNumber") @db.VarChar(50)
  password    String? @db.VarChar(255)
  position    String? @db.VarChar(255)

  UserRole     UserRole    @relation(fields: [userRoleId], references: [id])
  deleted      Int?        @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userRoleId   Int         @default(4)
  Department   Department? @relation(fields: [departmentId], references: [id])
  departmentId Int?

  Personal            Personal?
  Publication         Publication[]
  Reference           Reference[]
  Bonded              Bonded?
  Employment          Employment[]
  Essay               Essay?
  Application         Application[]
  GradesObtained      GradesObtained[]
  SchoolAttended      SchoolAttended[]
  UserLogs            UserLogs[]
  Certificate         Certificate[]
  Confirmation        Confirmation?
  AccessibleJob       AccessibleJob[]
  IndexNumber         IndexNumber[]
  Sex                 Sex[]
  FilteredOutReason   FilteredOutReason[]
  Reason              Reason[]
  RejectReason        RejectReason[]
  DegreePrefix        DegreePrefix[]
  Page                Page[]
  YesNo               YesNo[]
  MaritalStatus       MaritalStatus[]
  Division            Division[]
  StaffType           StaffType[]
  EducationLevel      EducationLevel[]
  Policy              Policy[]
  Job                 Job[]
  Advert              Advert[]
  ExamTypeNew         ExamTypeNew[]
  ExamType            ExamType[]
  Subject             Subject[]
  SubjectType         SubjectType[]
  Recruitment         Recruitment[]
  CurrentRecruitment  CurrentRecruitment[]
  CurrentShortlisting CurrentShortlisting[]
  Grade               Grade[]
  CreatedBy           User?                 @relation("CreatedBy", fields: [createdById], references: [id])
  users  User[] @relation("CreatedBy") // users created by this user
  createdById Int?    @default(1)
}

model UserLogs {
  id        Int      @id @default(autoincrement())
  User      User?    @relation(fields: [createdBy], references: [id])
  activity  String?  @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy Int
}

model Page {
  id         Int          @id @default(autoincrement())
  name       String       @unique(map: "name") @db.VarChar(255)
  icon       String?      @db.VarChar(255)
  hasSubMenu Int?         @default(0)
  createdBy  Int?         @default(1)
  deleted    Int?         @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  PageAccess PageAccess[]
  User       User?        @relation(fields: [createdBy], references: [id])
}

// model SubMenu {
//   id        Int      @id @default(autoincrement())
//   name      String   @unique(map: "name") @db.VarChar(255)
//   path      String?  @db.VarChar(255)
//   Menu      Menu     @relation(fields: [menuId], references: [id])
//   createdBy   Int?     @default(1)
//   deleted   Int?     @default(0)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   menuId    Int
// }

model DegreePrefix {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(255)
  createdBy Int?     @default(1)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [createdBy], references: [id])
}

model Personal {
  id               Int           @id @default(autoincrement())
  User             User          @relation(fields: [userId], references: [id])
  address          String?       @db.VarChar(255)
  residenceTel     String?       @db.VarChar(255)
  hometown         String?       @db.VarChar(255)
  birthPlace       String?       @db.VarChar(255)
  dob              String?       @db.VarChar(20)
  ageAtApplication Int?
  Sex              Sex           @relation(fields: [sexId], references: [id])
  MaritalStatus    MaritalStatus @relation(fields: [maritalStatusId], references: [id])
  childrenNumber   String?       @db.VarChar(20)
  deleted          Int?          @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  maritalStatusId Int
  sexId           Int
  userId          Int @unique

  title            String? @db.VarChar(255)
  permanentAddress String? @db.VarChar(255)
  presentAddress   String? @db.VarChar(255)

  sonNumber      String? @db.VarChar(255)
  daughterNumber String? @db.VarChar(255)
}

model Publication {
  id          Int      @id @default(autoincrement())
  User        User     @relation(fields: [userId], references: [id])
  title       String?  @unique(map: "title") @db.VarChar(255)
  date        String?  @db.VarChar(255)
  authors     String?  @db.VarChar(255)
  url         String?  @db.VarChar(255)
  description String?  @db.Text
  deleted     Int?     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int

  @@unique([userId, title], name: "titleusercomp")
}

model Reference {
  id         Int      @id @default(autoincrement())
  User       User     @relation(fields: [userId], references: [id])
  name       String   @db.VarChar(255)
  occupation String   @db.VarChar(255)
  address    String   @db.VarChar(255)
  phone      String   @db.VarChar(255)
  deleted    Int?     @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId Int

  @@unique([userId, name], name: "refnameusercomp")
}

model Confirmation {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique
  User             User     @relation(fields: [userId], references: [id])
  contactObjection Int
  deleted          Int?     @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  YesNo            YesNo    @relation(fields: [contactObjection], references: [id])
}

model Bonded {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  bonded    Int
  details   String?  @db.Text
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  YesNo     YesNo    @relation(fields: [bonded], references: [id])

  userId Int @unique
}

// model ContactObjection {
//   id        Int      @id @default(autoincrement())
//   User      User     @relation(fields: [userId], references: [id])
//   YesNo     YesNo    @relation(fields: [yesNoId], references: [id])
//   deleted   Int?     @default(0)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   userId  Int
//   yesNoId Int
// }

model Employment {
  id               Int      @id @default(autoincrement())
  User             User     @relation(fields: [userId], references: [id])
  organizationName String?  @db.VarChar(100)
  start            String?  @db.VarChar(100)
  end              String?  @db.VarChar(100)
  position         String?  @db.VarChar(100)
  salary           String?  @db.VarChar(100)
  leavingReason    String?  @db.VarChar(255)
  deleted          Int?     @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  userId Int
}

model Essay {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  essay     String   @db.Text
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      @unique(map: "userId")
}

model Application {
  id              Int      @id @default(autoincrement())
  jobId           Int
  submitted       Int?     @default(0)
  submissionDate  String?  @db.VarChar(255)
  shortlisted     Int?     @default(-1)
  deleted         Int?     @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          Int
  shortlistedById Int?

  User User @relation(fields: [userId], references: [id])

  Job                  Job                 @relation(fields: [jobId], references: [id])
  RejectReason         RejectReason[]
  // @@unique([userId, jobId], name: "userId_jobId")
  FilteredOutReason    FilteredOutReason[]
  currentRecruitmentId Int
  CurrentRecruitment   CurrentRecruitment  @relation(fields: [currentRecruitmentId], references: [id])
}

// model ApplicationMenu {
//   id                    Int                     @id @default(autoincrement())
//   name                  String?                 @db.VarChar(255)
//   path                  String?                 @db.VarChar(255)
//   icon                  String?                 @db.VarChar(255)
//   code                  String?                 @db.Text
//   deleted               Int?                    @default(0)
//   createdAt             DateTime                @default(now())
//   updatedAt             DateTime                @updatedAt
//   ApplicationMenuAccess ApplicationMenuAccess[]
// }

// model ApplicationMenuAccess {
//   id                Int             @id @default(autoincrement())
//   policyId Int
//   applicationMenuId Int
//   deleted           Int?            @default(0)
//   createdAt         DateTime        @default(now())
//   updatedAt         DateTime        @updatedAt
//   ApplicationMenu   ApplicationMenu @relation(fields: [applicationMenuId], references: [id])
//   Policy   Policy @relation(fields: [policyId], references: [id])

// }

// model Reason {
//   id          Int         @id @default(autoincrement())
//   Application Application @relation(fields: [applicationId], references: [id])
//   User        User        @relation(fields: [userId], references: [id])
//   createdBy     Int?
//   deleted     Int?        @default(0)
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt

//   RejectReason   RejectReason @relation(fields: [rejectReasonId], references: [id])
//   applicationId  Int
//   userId         Int
//   rejectReasonId Int
// }

model RejectReason {
  id          Int         @id @default(autoincrement())
  Application Application @relation(fields: [applicationId], references: [id])
  createdBy   Int?
  deleted     Int?        @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  User        User?       @relation(fields: [createdBy], references: [id])

  Reason        Reason @relation(fields: [reasonId], references: [id])
  applicationId Int
  reasonId      Int
}

model Reason {
  id        Int      @id @default(autoincrement())
  reason    String?  @db.VarChar(255)
  createdBy Int?     @default(1)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [createdBy], references: [id])

  RejectReason RejectReason[]
}

model ApplicationStatus {
  id        Int      @id @default(autoincrement())
  status    String?  @db.VarChar(255)
  createdBy Int?     @default(1)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FilteredOutReason {
  id            Int     @id @default(autoincrement())
  applicationId Int
  filterReason  String? @db.VarChar(200)
  User          User?   @relation(fields: [createdBy], references: [id])

  createdBy   Int?        @default(1)
  deleted     Int?        @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Application Application @relation(fields: [applicationId], references: [id])
}

// model FilterReason {
//   id            Int      @id @default(autoincrement())
//   reason        String?  @db.VarChar(150)
//   applicationId Int
//   createdBy       Int?     @default(1)
//   deleted       Int?     @default(0)
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt

//   FilteredOutReason FilteredOutReason[]
// }

model GradesObtained {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  ExamType  ExamType @relation(fields: [examTypeId], references: [id])
  Subject   Subject  @relation(fields: [subjectId], references: [id])
  Grade     Grade    @relation(fields: [gradeId], references: [id])
  year      String?  @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  examTypeId Int
  userId     Int
  subjectId  Int
  gradeId    Int

  @@unique([userId, year, examTypeId, subjectId, gradeId], name: "gradesObtainedComp")
}

model IndexNumber {
  id          Int      @id @default(autoincrement())
  indexNumber String   @db.VarChar(255)
  year        String   @db.VarChar(255)
  createdBy   Int?     @default(1)
  deleted     Int?     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])
  userId      Int

  ExamTypeNew   ExamTypeNew? @relation(fields: [examTypeNewId], references: [id])
  examTypeNewId Int?
}

model Certificate {
  id                  Int            @id @default(autoincrement())
  User                User           @relation(fields: [userId], references: [id])
  institution         String?        @db.VarChar(255)
  from                String?        @db.VarChar(255)
  to                  String?        @db.VarChar(255)
  certificateObtained String?        @db.VarChar(255)
  EducationLevel      EducationLevel @relation(fields: [educationLevelId], references: [id])
  deleted             Int?           @default(0)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  userId              Int
  educationLevelId    Int
}

model SchoolAttended {
  id               Int            @id @default(autoincrement())
  User             User           @relation(fields: [userId], references: [id])
  EducationLevel   EducationLevel @relation(fields: [educationLevelId], references: [id])
  institutionName  String?        @db.VarChar(255)
  institutionStart String?        @db.VarChar(255)
  institutionEnd   String?        @db.VarChar(255)
  deleted          Int?           @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  educationLevelId Int
  userId           Int
}
