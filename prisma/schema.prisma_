generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model accessible_job {
  id        Int      @id @default(autoincrement())
  jobId     Int
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    Int
  job       job      @relation(fields: [jobId], references: [id], map: "AccessibleJob_jobId_fkey")
  user      user     @relation(fields: [userId], references: [id], map: "AccessibleJob_userId_fkey")

  @@index([jobId], map: "AccessibleJob_jobId_fkey")
  @@index([userId], map: "AccessibleJob_userId_fkey")
}

model advert {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(255)
  details   String?  @db.Text
  published Int?     @default(0)
  createdBy Int?     @default(1)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
  policyId  Int
  user      user?    @relation(fields: [createdBy], references: [id], map: "Advert_createdBy_fkey")
  policy    policy   @relation(fields: [policyId], references: [id], map: "Advert_policyId_fkey")

  @@index([createdBy], map: "Advert_createdBy_fkey")
  @@index([policyId], map: "Advert_policyId_fkey")
}

model application {
  id                   Int                 @id @default(autoincrement())
  jobId                Int
  submitted            Int?                @default(0)
  submissionDate       String?             @db.VarChar(255)
  shortlisted          Int?                @default(-1)
  deleted              Int?                @default(0)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime
  userId               Int
  shortlistedById      Int?
  currentRecruitmentId Int
  current_recruitment   current_recruitment  @relation(fields: [currentRecruitmentId], references: [id], map: "Application_currentRecruitmentId_fkey")
  job                  job                 @relation(fields: [jobId], references: [id], map: "Application_jobId_fkey")
  user                 user                @relation(fields: [userId], references: [id], map: "Application_userId_fkey")
  filtered_out_reason    filtered_out_reason[]
  reject_reason         reject_reason[]

  @@index([currentRecruitmentId], map: "Application_currentRecruitmentId_fkey")
  @@index([jobId], map: "Application_jobId_fkey")
  @@index([userId], map: "Application_userId_fkey")
}

model application_status {
  id        Int      @id @default(autoincrement())
  status    String?  @db.VarChar(255)
  createdBy Int?     @default(1)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model bonded {
  id        Int      @id @default(autoincrement())
  bonded    Int
  details   String?  @db.Text
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    Int      @unique(map: "Bonded_userId_key")
  yes_no     yes_no    @relation(fields: [bonded], references: [id], map: "Bonded_bonded_fkey")
  user      user     @relation(fields: [userId], references: [id], map: "Bonded_userId_fkey")

  @@index([bonded], map: "Bonded_bonded_fkey")
}

model certificate {
  id                  Int            @id @default(autoincrement())
  institution         String?        @db.VarChar(255)
  from                String?        @db.VarChar(255)
  to                  String?        @db.VarChar(255)
  certificateObtained String?        @db.VarChar(255)
  deleted             Int?           @default(0)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime
  userId              Int
  educationLevelId    Int
  education_level      education_level @relation(fields: [educationLevelId], references: [id], map: "Certificate_educationLevelId_fkey")
  user                user           @relation(fields: [userId], references: [id], map: "Certificate_userId_fkey")

  @@index([educationLevelId], map: "Certificate_educationLevelId_fkey")
  @@index([userId], map: "Certificate_userId_fkey")
}

model confirmation {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique(map: "Confirmation_userId_key")
  contactObjection Int
  deleted          Int?     @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  yes_no            yes_no    @relation(fields: [contactObjection], references: [id], map: "Confirmation_contactObjection_fkey")
  user             user     @relation(fields: [userId], references: [id], map: "Confirmation_userId_fkey")

  @@index([contactObjection], map: "Confirmation_contactObjection_fkey")
}

model current_recruitment {
  id            Int           @id @default(autoincrement())
  createdBy     Int?          @default(1)
  deleted       Int?          @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  recruitmentId Int
  application   application[]
  user          user?         @relation(fields: [createdBy], references: [id], map: "CurrentRecruitment_createdBy_fkey")
  recruitment   recruitment   @relation(fields: [recruitmentId], references: [id], map: "CurrentRecruitment_recruitmentId_fkey")

  @@index([createdBy], map: "CurrentRecruitment_createdBy_fkey")
  @@index([recruitmentId], map: "CurrentRecruitment_recruitmentId_fkey")
}

model current_shortlisting {
  id            Int         @id @default(autoincrement())
  createdBy     Int?        @default(1)
  deleted       Int?        @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  recruitmentId Int
  user          user?       @relation(fields: [createdBy], references: [id], map: "CurrentShortlisting_createdBy_fkey")
  recruitment   recruitment @relation(fields: [recruitmentId], references: [id], map: "CurrentShortlisting_recruitmentId_fkey")

  @@index([createdBy], map: "CurrentShortlisting_createdBy_fkey")
  @@index([recruitmentId], map: "CurrentShortlisting_recruitmentId_fkey")
}

model degree_prefix {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(255)
  createdBy Int?     @default(1)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
  user      user?    @relation(fields: [createdBy], references: [id], map: "DegreePrefix_createdBy_fkey")

  @@index([createdBy], map: "DegreePrefix_createdBy_fkey")
}

model department {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  createdBy  Int?     @default(1)
  deleted    Int?     @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  divisionId Int
  division   division @relation(fields: [divisionId], references: [id], map: "Department_divisionId_fkey")
  user       user[]

  @@index([divisionId], map: "Department_divisionId_fkey")
}

model division {
  id         Int          @id @default(autoincrement())
  name       String       @unique(map: "name") @db.VarChar(255)
  createdBy  Int?         @default(1)
  deleted    Int          @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  department department[]
}

model education_level {
  id             Int              @id @default(autoincrement())
  name           String           @unique(map: "name") @db.VarChar(100)
  createdBy      Int?             @default(1)
  deleted        Int?             @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  certificate    certificate[]
  user           user?            @relation(fields: [createdBy], references: [id], map: "EducationLevel_createdBy_fkey")
  policy         policy[]
  school_attended school_attended[]

  @@index([createdBy], map: "EducationLevel_createdBy_fkey")
}

model employment {
  id               Int      @id @default(autoincrement())
  organizationName String?  @db.VarChar(100)
  start            String?  @db.VarChar(100)
  end              String?  @db.VarChar(100)
  position         String?  @db.VarChar(100)
  salary           String?  @db.VarChar(100)
  leavingReason    String?  @db.VarChar(255)
  deleted          Int?     @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  userId           Int
  user             user     @relation(fields: [userId], references: [id], map: "Employment_userId_fkey")

  @@index([userId], map: "Employment_userId_fkey")
}

model essay {
  id        Int      @id @default(autoincrement())
  essay     String   @db.Text
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    Int      @unique(map: "userId")
  user      user     @relation(fields: [userId], references: [id], map: "Essay_userId_fkey")
}

model exam_type {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  createdBy       Int?              @default(1)
  deleted         Int?              @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  user            user?             @relation(fields: [createdBy], references: [id], map: "exam_type_createdBy_fkey")
  grade           grade[]
  grades_obtained grades_obtained[]
  subject         subject[]

  @@index([createdBy], map: "exam_type_createdBy_fkey")
}

model exam_typenew {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  createdBy   Int?          @default(1)
  deleted     Int?          @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  user        user?         @relation(fields: [createdBy], references: [id], map: "exam_typeNew_createdBy_fkey")
  index_number index_number[]

  @@index([createdBy], map: "exam_typeNew_createdBy_fkey")
}

model filtered_out_reason {
  id            Int         @id @default(autoincrement())
  applicationId Int
  filterReason  String?     @db.VarChar(200)
  createdBy     Int?        @default(1)
  deleted       Int?        @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  application   application @relation(fields: [applicationId], references: [id], map: "FilteredOutReason_applicationId_fkey")
  user          user?       @relation(fields: [createdBy], references: [id], map: "FilteredOutReason_createdBy_fkey")

  @@index([applicationId], map: "FilteredOutReason_applicationId_fkey")
  @@index([createdBy], map: "FilteredOutReason_createdBy_fkey")
}

model grade {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  exam_type_id    Int
  interpretation  Int
  createdBy       Int?              @default(1)
  deleted         Int?              @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  user            user?             @relation(fields: [createdBy], references: [id], map: "Grade_createdBy_fkey")
  exam_type       exam_type         @relation(fields: [exam_typeId], references: [id], map: "Grade_exam_typeId_fkey")
  grades_obtained grades_obtained[]

  @@index([createdBy], map: "Grade_createdBy_fkey")
  @@index([exam_type_id], map: "Grade_exam_typeId_fkey")
}

model grades_obtained {
  id          Int       @id @default(autoincrement())
  year        String?   @db.VarChar(255)
  deleted     Int?      @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  exam_typeId Int
  userId      Int
  subjectId   Int
  gradeId     Int
  exam_type   exam_type @relation(fields: [exam_typeId], references: [id], map: "grades_obtained_exam_typeId_fkey")
  grade       grade     @relation(fields: [gradeId], references: [id], map: "grades_obtained_gradeId_fkey")
  subject     subject   @relation(fields: [subjectId], references: [id], map: "grades_obtained_subjectId_fkey")
  user        user      @relation(fields: [userId], references: [id], map: "grades_obtained_userId_fkey")

  @@unique([userId, year, exam_typeId, subjectId, gradeId], map: "grades_obtained_userId_year_exam_typeId_subjectId_gradeId_key")
  @@index([exam_typeId], map: "grades_obtained_exam_typeId_fkey")
  @@index([gradeId], map: "grades_obtained_gradeId_fkey")
  @@index([subjectId], map: "grades_obtained_subjectId_fkey")
}

model index_number {
  id             Int           @id @default(autoincrement())
  indexNumber    String        @db.VarChar(255)
  year           String        @db.VarChar(255)
  createdBy      Int?          @default(1)
  deleted        Int?          @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  userId         Int
  exam_typeNewId Int?
  exam_typenew   exam_typenew? @relation(fields: [exam_typeNewId], references: [id], map: "IndexNumber_exam_typeNewId_fkey")
  user           user          @relation(fields: [userId], references: [id], map: "IndexNumber_userId_fkey")

  @@index([exam_typeNewId], map: "IndexNumber_exam_typeNewId_fkey")
  @@index([userId], map: "IndexNumber_userId_fkey")
}

model job {
  id             Int              @id @default(autoincrement())
  name           String?          @unique(map: "name") @db.VarChar(255)
  published      Int?             @default(0)
  createdBy      Int?             @default(1)
  deleted        Int?             @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  policyId       Int
  accessible_job accessible_job[]
  application    application[]
  user           user?            @relation(fields: [createdBy], references: [id], map: "Job_createdBy_fkey")
  policy         policy           @relation(fields: [policyId], references: [id], map: "Job_policyId_fkey")

  @@unique([policyId, name, deleted], map: "Job_policyId_name_deleted_key")
  @@index([createdBy], map: "Job_createdBy_fkey")
}

model marital_status {
  id        Int        @id @default(autoincrement())
  name      String     @unique(map: "name") @db.VarChar(10)
  createdBy Int?       @default(1)
  deleted   Int?       @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime
  personal  personal[]
}

model page {
  id          Int           @id @default(autoincrement())
  name        String        @unique(map: "name") @db.VarChar(255)
  icon        String?       @db.VarChar(255)
  hasSubMenu  Int?          @default(0)
  createdBy   Int?          @default(1)
  deleted     Int?          @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  user        user?         @relation(fields: [createdBy], references: [id], map: "Page_createdBy_fkey")
  page_access page_access[]

  @@index([createdBy], map: "Page_createdBy_fkey")
}

model page_access {
  id         Int      @id @default(autoincrement())
  createdBy  Int?     @default(1)
  deleted    Int?     @default(0)
  userRoleId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  pageId     Int
  page       page     @relation(fields: [pageId], references: [id], map: "PageAccess_pageId_fkey")
  userrole   userrole @relation(fields: [userRoleId], references: [id], map: "PageAccess_userRoleId_fkey")

  @@index([pageId], map: "PageAccess_pageId_fkey")
  @@index([userRoleId], map: "PageAccess_userRoleId_fkey")
}

model personal {
  id               Int           @id @default(autoincrement())
  address          String?       @db.VarChar(255)
  residenceTel     String?       @db.VarChar(255)
  hometown         String?       @db.VarChar(255)
  birthPlace       String?       @db.VarChar(255)
  dob              String?       @db.VarChar(20)
  ageAtApplication Int?
  childrenNumber   String?       @db.VarChar(20)
  deleted          Int?          @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime
  maritalStatusId  Int
  sexId            Int
  userId           Int           @unique(map: "Personal_userId_key")
  permanentAddress String?       @db.VarChar(255)
  presentAddress   String?       @db.VarChar(255)
  sonNumber        String?       @db.VarChar(255)
  daughterNumber   String?       @db.VarChar(255)
  titleId          Int?
  haveKids         Int
  yesno            yesno         @relation(fields: [haveKids], references: [id], map: "Personal_haveKids_fkey")
  maritalstatus    maritalstatus @relation(fields: [maritalStatusId], references: [id], map: "Personal_maritalStatusId_fkey")
  sex              sex           @relation(fields: [sexId], references: [id], map: "Personal_sexId_fkey")
  title            title?        @relation(fields: [titleId], references: [id], map: "Personal_titleId_fkey")
  user             user          @relation(fields: [userId], references: [id], map: "Personal_userId_fkey")

  @@index([haveKids], map: "Personal_haveKids_fkey")
  @@index([maritalStatusId], map: "Personal_maritalStatusId_fkey")
  @@index([sexId], map: "Personal_sexId_fkey")
  @@index([titleId], map: "Personal_titleId_fkey")
}

model policy {
  id               Int            @id @default(autoincrement())
  name             String?        @db.VarChar(255)
  age              Int
  experience       Int?
  minimumGrade     Int
  deadline         DateTime?      @db.Date
  note             String?        @db.VarChar(1000)
  createdBy        Int?           @default(1)
  deleted          Int?           @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  staffTypeId      Int
  educationLevelId Int
  advert           advert[]
  job              job[]
  user             user?          @relation(fields: [createdBy], references: [id], map: "Policy_createdBy_fkey")
  educationlevel   educationlevel @relation(fields: [educationLevelId], references: [id], map: "Policy_educationLevelId_fkey")
  stafftype        stafftype      @relation(fields: [staffTypeId], references: [id], map: "Policy_staffTypeId_fkey")

  @@index([createdBy], map: "Policy_createdBy_fkey")
  @@index([educationLevelId], map: "Policy_educationLevelId_fkey")
  @@index([staffTypeId], map: "Policy_staffTypeId_fkey")
}

model publication {
  id          Int      @id @default(autoincrement())
  title       String?  @unique(map: "title") @db.VarChar(255)
  date        String?  @db.VarChar(255)
  authors     String?  @db.VarChar(255)
  url         String?  @db.VarChar(255)
  description String?  @db.Text
  deleted     Int?     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  userId      Int
  user        user     @relation(fields: [userId], references: [id], map: "Publication_userId_fkey")

  @@unique([userId, title], map: "Publication_userId_title_key")
}

model reason {
  id           Int            @id @default(autoincrement())
  reason       String?        @db.VarChar(255)
  createdBy    Int?           @default(1)
  deleted      Int?           @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  user         user?          @relation(fields: [createdBy], references: [id], map: "Reason_createdBy_fkey")
  rejectreason rejectreason[]

  @@index([createdBy], map: "Reason_createdBy_fkey")
}

model recruitment {
  id                  Int                   @id @default(autoincrement())
  name                String?               @unique(map: "name") @db.VarChar(255)
  code                String?               @db.VarChar(255)
  createdBy           Int?                  @default(1)
  deleted             Int?                  @default(0)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  staffTypeId         Int
  currentrecruitment  currentrecruitment[]
  currentshortlisting currentshortlisting[]
  user                user?                 @relation(fields: [createdBy], references: [id], map: "Recruitment_createdBy_fkey")
  stafftype           stafftype             @relation(fields: [staffTypeId], references: [id], map: "Recruitment_staffTypeId_fkey")

  @@index([createdBy], map: "Recruitment_createdBy_fkey")
  @@index([staffTypeId], map: "Recruitment_staffTypeId_fkey")
}

model reference {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  occupation String   @db.VarChar(255)
  address    String   @db.VarChar(255)
  phone      String   @db.VarChar(255)
  deleted    Int?     @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  userId     Int
  user       user     @relation(fields: [userId], references: [id], map: "Reference_userId_fkey")

  @@unique([userId, name], map: "Reference_userId_name_key")
}

model reject_reason {
  id            Int         @id @default(autoincrement())
  createdBy     Int?
  deleted       Int?        @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  applicationId Int
  reasonId      Int
  application   application @relation(fields: [applicationId], references: [id], map: "RejectReason_applicationId_fkey")
  user          user?       @relation(fields: [createdBy], references: [id], map: "RejectReason_createdBy_fkey")
  reason        reason      @relation(fields: [reasonId], references: [id], map: "RejectReason_reasonId_fkey")

  @@index([applicationId], map: "RejectReason_applicationId_fkey")
  @@index([createdBy], map: "RejectReason_createdBy_fkey")
  @@index([reasonId], map: "RejectReason_reasonId_fkey")
}

model school_attended {
  id               Int            @id @default(autoincrement())
  institutionName  String?        @db.VarChar(255)
  institutionStart String?        @db.VarChar(255)
  institutionEnd   String?        @db.VarChar(255)
  deleted          Int?           @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  educationLevelId Int
  userId           Int
  educationlevel   educationlevel @relation(fields: [educationLevelId], references: [id], map: "SchoolAttended_educationLevelId_fkey")
  user             user           @relation(fields: [userId], references: [id], map: "SchoolAttended_userId_fkey")

  @@index([educationLevelId], map: "SchoolAttended_educationLevelId_fkey")
  @@index([userId], map: "SchoolAttended_userId_fkey")
}

model sex {
  id        Int        @id @default(autoincrement())
  name      String     @unique(map: "name") @db.VarChar(8)
  createdBy Int?       @default(1)
  deleted   Int?       @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime
  personal  personal[]
}

model staff_type {
  id          Int           @id @default(autoincrement())
  name        String?       @db.VarChar(255)
  createdBy   Int?          @default(1)
  deleted     Int?          @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  policy      policy[]
  recruitment recruitment[]
  user        user?         @relation(fields: [createdBy], references: [id], map: "StaffType_createdBy_fkey")

  @@index([createdBy], map: "StaffType_createdBy_fkey")
}

model subject {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  createdBy       Int?              @default(1)
  deleted         Int?              @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  exam_typeId     Int
  subjectTypeId   Int
  grades_obtained grades_obtained[]
  user            user?             @relation(fields: [createdBy], references: [id], map: "Subject_createdBy_fkey")
  exam_type       exam_type         @relation(fields: [exam_typeId], references: [id], map: "Subject_exam_typeId_fkey")
  subjecttype     subjecttype       @relation(fields: [subjectTypeId], references: [id], map: "Subject_subjectTypeId_fkey")

  @@index([createdBy], map: "Subject_createdBy_fkey")
  @@index([exam_typeId], map: "Subject_exam_typeId_fkey")
  @@index([subjectTypeId], map: "Subject_subjectTypeId_fkey")
}

model subject_type {
  id        Int       @id @default(autoincrement())
  name      String?   @db.VarChar(255)
  createdBy Int?      @default(1)
  deleted   Int?      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime
  subject   subject[]
  user      user?     @relation(fields: [createdBy], references: [id], map: "SubjectType_createdBy_fkey")

  @@index([createdBy], map: "SubjectType_createdBy_fkey")
}

model title {
  id        Int        @id @default(autoincrement())
  name      String     @unique(map: "name") @db.VarChar(10)
  createdBy Int?       @default(1)
  deleted   Int?       @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime
  personal  personal[]
}

model user {
  id                  Int                   @id @default(autoincrement())
  firstName           String?               @db.VarChar(255)
  surname             String?               @db.VarChar(255)
  otherNames          String?               @db.VarChar(255)
  email               String                @unique(map: "email") @db.VarChar(50)
  phoneNumber         String?               @unique(map: "phoneNumber") @db.VarChar(50)
  password            String?               @db.VarChar(255)
  position            String?               @db.VarChar(255)
  deleted             Int?                  @default(0)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  userRoleId          Int                   @default(4)
  departmentId        Int?
  loginTimes          Int                   @default(0)
  createdById         Int?                  @default(1)
  accessiblejob       accessiblejob[]
  advert              advert[]
  application         application[]
  bonded              bonded?
  certificate         certificate[]
  confirmation        confirmation?
  currentrecruitment  currentrecruitment[]
  currentshortlisting currentshortlisting[]
  degreeprefix        degreeprefix[]
  educationlevel      educationlevel[]
  employment          employment[]
  essay               essay?
  exam_type           exam_type[]
  exam_typenew        exam_typenew[]
  filteredoutreason   filteredoutreason[]
  grade               grade[]
  grades_obtained     grades_obtained[]
  indexnumber         indexnumber[]
  job                 job[]
  page                page[]
  personal            personal?
  policy              policy[]
  publication         publication[]
  reason              reason[]
  recruitment         recruitment[]
  reference           reference[]
  rejectreason        rejectreason[]
  schoolattended      schoolattended[]
  stafftype           stafftype[]
  subject             subject[]
  subjecttype         subjecttype[]
  user                user?                 @relation("userTouser", fields: [createdById], references: [id], map: "User_createdById_fkey")
  other_user          user[]                @relation("userTouser")
  department          department?           @relation(fields: [departmentId], references: [id], map: "User_departmentId_fkey")
  userrole            userrole              @relation(fields: [userRoleId], references: [id], map: "User_userRoleId_fkey")
  userlogs            userlogs[]

  @@index([createdById], map: "User_createdById_fkey")
  @@index([departmentId], map: "User_departmentId_fkey")
  @@index([userRoleId], map: "User_userRoleId_fkey")
}

model user_logs {
  id        Int      @id @default(autoincrement())
  activity  String?  @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
  createdBy Int
  user      user     @relation(fields: [createdBy], references: [id], map: "UserLogs_createdBy_fkey")

  @@index([createdBy], map: "UserLogs_createdBy_fkey")
}

model user_role {
  id        Int      @id @default(autoincrement())
  name      String   @unique(map: "UserRole_name_key") @db.VarChar(255)
  createdBy Int?     @default(1)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model yes_no {
  id        Int      @id @default(autoincrement())
  value     String?  @db.VarChar(255)
  createdBy Int?     @default(1)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
}
